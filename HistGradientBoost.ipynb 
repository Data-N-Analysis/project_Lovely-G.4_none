{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kdovin/project_Lovely-G.4_none/blob/main/HistGradientBoost.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8hFkFW4X6wub"
      },
      "source": [
        "# < 데이터 불러오기 >"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 355,
      "metadata": {
        "id": "xFmFkgUN6n3T"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "\n",
        "# 기본 한글 폰트로 설정\n",
        "import matplotlib.font_manager as fm  # 폰트 관리\n",
        "\n",
        "\n",
        "!apt-get update -qq         # apt-get 패키지 설치 명령어, -qq : 에러외 메세지 숨기기\n",
        "!apt-get install fonts-nanum* -qq #나눔글꼴 설치\n",
        "\n",
        "fe = fm.FontEntry(fname=r'C:/Windows/Fonts/NanumGothic.ttf', name='NanumGothic') #파일 저장되어있는 경로와 이름 설정\n",
        "fm.fontManager.ttflist.insert(0, fe)  # Matplotlib에 폰트 추가\n",
        "plt.rcParams.update({'font.size': 10, 'font.family': 'NanumGothic'}) #폰트설정\n",
        "plt.rcParams['font.family'] = 'NanumGothic'\n",
        "\n",
        "# 음수 부호까지 제대로 표시되도록 설정 추가\n",
        "plt.rcParams['axes.unicode_minus'] = False\n",
        "\n",
        "# 경고 메시지 무시\n",
        "import random, warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 356,
      "metadata": {
        "id": "a_u0_2P65vu3"
      },
      "outputs": [],
      "source": [
        "#데이터 불러오기\n",
        "train_df = pd.read_csv('/content/drive/MyDrive/데이터/주택가격/train.csv') #모델 학습 파일\n",
        "test_df = pd.read_csv('/content/drive/MyDrive/데이터/주택가격/test.csv') #모델 시험지 파일\n",
        "submission = pd.read_csv('/content/drive/MyDrive/데이터/주택가격/sample_submission.csv') #답안지 파일"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l271VQ1n7NlN"
      },
      "source": [
        "# < 이상치 처리 >"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_replace = ['LotFrontage', 'BsmtFinSF1', 'TotalBsmtSF', 'EnclosedPorch', 'MiscVal']  # 대체하려는 변수들의 리스트\n",
        "values_to_replace = [300, 5000, 5000, 500, 8000]  # 대체하려는 값들의 리스트\n",
        "\n",
        "for column, value in zip(columns_to_replace, values_to_replace):\n",
        "    median_value = train_df.loc[train_df[column] < value, column].median()  # 대체할 값(value)이 아닌 값들의 중앙값 계산\n",
        "    train_df.loc[train_df[column] > value, column] = median_value  # 대체할 값(value)을 중앙값으로 대체"
      ],
      "metadata": {
        "id": "ADTAoc8u7P3v"
      },
      "execution_count": 357,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "columns2_to_replace = ['BsmtFinSF1', 'TotalBsmtSF', 'WoodDeckSF', 'EnclosedPorch', 'MiscVal', '1stFlrSF', 'LowQualFinSF', 'GarageYrBlt']  # 대체하려는 변수들의 리스트\n",
        "values2_to_replace = [3500,4000,1200,800,10000,4000,1000,2150]  # 대체하려는 값들의 리스트\n",
        "\n",
        "for column, value in zip(columns2_to_replace, values2_to_replace):\n",
        "    median_value = test_df.loc[test_df[column] < value, column].median()  # 대체할 값(value)이 아닌 값들의 중앙값 계산\n",
        "    test_df.loc[test_df[column] > value, column] = median_value  # 대체할 값(value)을 중앙값으로 대체"
      ],
      "metadata": {
        "id": "MzFYUaie7U_Q"
      },
      "execution_count": 358,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5qe5ush57XrD"
      },
      "source": [
        "# < PCA 추가 이상치 처리 >"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 359,
      "metadata": {
        "id": "3zzR46iJxqEp"
      },
      "outputs": [],
      "source": [
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# house_df 생성\n",
        "house_df = pd.concat([train_df, test_df], ignore_index=True, sort=False)\n",
        "\n",
        "# train_df에서 SalePrice가 null이 아닌 행의 인덱스 추출\n",
        "tr_idx = house_df['SalePrice'].notnull()\n",
        "\n",
        "# PCA 적용 함수 정의\n",
        "def apply_pca(X, standardize=True):\n",
        "    # Standardize\n",
        "    if standardize:\n",
        "        X = (X - X.mean(axis=0)) / X.std(axis=0)\n",
        "    # PCA 적용\n",
        "    pca = PCA()\n",
        "    X_pca = pca.fit_transform(X)\n",
        "    # DataFrame으로 변환\n",
        "    component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n",
        "    X_pca = pd.DataFrame(X_pca, columns=component_names)\n",
        "    # Loadings 생성\n",
        "    loadings = pd.DataFrame(\n",
        "        pca.components_.T,\n",
        "        columns=component_names,\n",
        "        index=X.columns,\n",
        "    )\n",
        "    return pca, X_pca, loadings\n",
        "\n",
        "# IQR을 사용하여 이상치 감지 함수 정의\n",
        "def outlier_iqr(data):\n",
        "    q1, q3 = np.nanpercentile(data, [25, 75])\n",
        "    iqr = q3 - q1\n",
        "    lower = q1 - (iqr * 2)\n",
        "    upper = q3 + (iqr * 2)\n",
        "    return np.where((data > upper) | (data < lower))[0]\n",
        "\n",
        "# 이상치를 찾을 feature 선택\n",
        "features = [\"GarageArea\", \"OverallQual\", \"TotalBsmtSF\", \"GrLivArea\"]\n",
        "\n",
        "# 이상치 제거 전에 데이터 복사\n",
        "house_copy = house_df[tr_idx].copy()\n",
        "y_copy = house_copy.pop(\"SalePrice\")\n",
        "X_copy = house_copy.loc[:, features]\n",
        "\n",
        "# PCA 적용\n",
        "pca, X_pca, loadings = apply_pca(X_copy)\n",
        "\n",
        "# Plotly를 사용하여 PCA 히스토그램 생성\n",
        "import plotly.express as px\n",
        "fig = px.histogram(X_pca[['PC1', 'PC2']].melt(), color=\"variable\",\n",
        "                   marginal=\"box\",\n",
        "                   barmode=\"overlay\",\n",
        "                   histnorm='density'\n",
        "                  )\n",
        "fig.update_layout(\n",
        "    title_font_color=\"white\",\n",
        "    legend_title_font_color=\"yellow\",\n",
        "    title={\n",
        "        'text': \"PCA Histogram\",\n",
        "        'x':0.5,\n",
        "        'xanchor': 'center',\n",
        "        'yanchor': 'top'},\n",
        "    paper_bgcolor=\"black\",\n",
        "    plot_bgcolor='black',\n",
        "    font_color=\"white\",\n",
        ")\n",
        "\n",
        "# PC1에 대한 이상치 감지\n",
        "pc1_outlier_idx = outlier_iqr(X_pca['PC1'])\n",
        "df_temp_pc1 = house_df.loc[:, [\"SalePrice\", \"Neighborhood\", \"SaleCondition\"] + features]\n",
        "df_temp_pc1.iloc[pc1_outlier_idx,:].style.set_properties(**{'background-color': 'Grey', 'color': 'white', 'border-color': 'darkblack'})\n",
        "\n",
        "# PC2에 대한 이상치 감지\n",
        "pc2_outlier_idx = outlier_iqr(X_pca['PC2'])\n",
        "df_temp_pc2 = house_df.loc[:, [\"SalePrice\", \"Neighborhood\", \"SaleCondition\"] + features]\n",
        "df_temp_pc2.iloc[pc2_outlier_idx,:].style.set_properties(**{'background-color': 'Grey', 'color': 'white', 'border-color': 'darkblack'})\n",
        "\n",
        "# 이상치 제거\n",
        "house_df.drop(pc1_outlier_idx, axis=0, inplace=True, errors='ignore')\n",
        "house_df.drop(pc2_outlier_idx, axis=0, inplace=True, errors='ignore')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RQnbY2D8B8nn"
      },
      "source": [
        "# < 스케일링 >"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 360,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IPKwDxSKB_qY",
        "outputId": "ae268509-c938-4978-a950-53f59743d2e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GarageArea      Skewness: 00.21     Kurtosis: 000.87\n",
            "OverallQual     Skewness: 00.18     Kurtosis: -00.01\n",
            "TotalBsmtSF     Skewness: 00.28     Kurtosis: 000.75\n",
            "GrLivArea       Skewness: 00.97     Kurtosis: 001.86\n"
          ]
        }
      ],
      "source": [
        "# 왜도 첨도 확인!\n",
        "# 왜도 1이상, 첨도 3이상이면 로그변환 필요! (딘, 무조건 필요한 건 아님)\n",
        "\n",
        "for col in features:\n",
        "    print('{:15}'.format(col),\n",
        "          'Skewness: {:05.2f}'.format(house_df[col].skew()) ,\n",
        "          '   ' ,\n",
        "          'Kurtosis: {:06.2f}'.format(house_df[col].kurt())\n",
        "         )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 361,
      "metadata": {
        "id": "epWMRMS-CB_Z"
      },
      "outputs": [],
      "source": [
        "house_df[\"LotArea\"] = np.log1p(house_df[\"LotArea\"])\n",
        "house_df[\"LowQualFinSF\"] = np.log1p(house_df[\"LowQualFinSF\"])\n",
        "house_df[\"PoolArea\"] = np.log1p(house_df[\"PoolArea\"])\n",
        "house_df[\"3SsnPorch\"] = np.log1p(house_df[\"3SsnPorch\"])\n",
        "house_df[\"MiscVal\"] = np.log1p(house_df[\"MiscVal\"])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 지수변환\n",
        "house_df['TotalBsmtSF'] = house_df['TotalBsmtSF'].apply(lambda x: np.exp(6) if x <= 0.0 else x)\n",
        "house_df['2ndFlrSF'] = house_df['2ndFlrSF'].apply(lambda x: np.exp(6.5) if x <= 0.0 else x)\n",
        "house_df['GarageArea'] = house_df['GarageArea'].apply(lambda x: np.exp(6) if x <= 0.0 else x)\n",
        "house_df['GarageCars'] = house_df['GarageCars'].apply(lambda x: 0 if x <= 0.0 else x)\n",
        "house_df['LotFrontage'] = house_df['LotFrontage'].apply(lambda x: np.exp(4.2) if x <= 0.0 else x)\n",
        "house_df['MasVnrArea'] = house_df['MasVnrArea'].apply(lambda x: np.exp(4) if x <= 0.0 else x)\n",
        "house_df['BsmtFinSF1'] = house_df['BsmtFinSF1'].apply(lambda x: np.exp(6.5) if x <= 0.0 else x)"
      ],
      "metadata": {
        "id": "DyRAKh9UCFDj"
      },
      "execution_count": 362,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 363,
      "metadata": {
        "id": "jdfXXXtYCHd6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5f3e0cbe-020e-482e-ad1d-55ae411881f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of numerical variables:  38\n"
          ]
        }
      ],
      "source": [
        "numerical_features_log = [feature for feature in house_df.columns if house_df[feature].dtypes != 'O']\n",
        "\n",
        "print('Number of numerical variables: ', len(numerical_features_log))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 364,
      "metadata": {
        "id": "tbI99OfOCJir",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6962434c-4b8e-4fd8-965b-0176b2cb2e3a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GarageArea      Skewness: 00.90     Kurtosis: 001.32\n",
            "OverallQual     Skewness: 00.18     Kurtosis: -00.01\n",
            "TotalBsmtSF     Skewness: 00.64     Kurtosis: 000.45\n",
            "GrLivArea       Skewness: 00.97     Kurtosis: 001.86\n"
          ]
        }
      ],
      "source": [
        "# 왜도 첨도 확인!\n",
        "# 왜도 1이상, 첨도 3이상이면 로그변환 필요! (딘, 무조건 필요한 건 아님)\n",
        "\n",
        "for col in features:\n",
        "    print('{:15}'.format(col),\n",
        "          'Skewness: {:05.2f}'.format(house_df[col].skew()) ,\n",
        "          '   ' ,\n",
        "          'Kurtosis: {:06.2f}'.format(house_df[col].kurt())\n",
        "         )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 365,
      "metadata": {
        "id": "U5_kG5cZCMNZ"
      },
      "outputs": [],
      "source": [
        "house_df[\"SalePrice\"] = np.log1p(house_df[\"SalePrice\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fQn7onnPCUEm"
      },
      "source": [
        "# < 파생변수 >"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# LabelEncoder 객체 생성\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "# ExterQual, ExterCond, BsmtQual, BsmtCond, BsmtFinType1, BsmtFinType2, GarageQual, GarageCond 열을 숫자형으로 변환\n",
        "columns_to_encode = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtFinType1', 'BsmtFinType2', 'GarageQual', 'GarageCond']\n",
        "for column in columns_to_encode:\n",
        "    house_df[column + '_num'] = label_encoder.fit_transform(house_df[column])\n",
        "\n",
        "# TotalExtQual 열을 생성하고 숫자형으로 변환\n",
        "quality_mapping = {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1}  # 각 품질 등급을 숫자로 매핑\n",
        "house_df['TotalExtQual'] = house_df['ExterQual'].map(quality_mapping) + house_df['ExterCond'].map(quality_mapping)\n",
        "\n",
        "# 연산에 필요한 새로운 열들을 생성\n",
        "house_df['TotalSF'] = house_df['BsmtFinSF1'] + house_df['BsmtFinSF2'] + house_df['1stFlrSF'] + house_df['2ndFlrSF']\n",
        "house_df['TotalBathrooms'] = house_df['FullBath'] + (0.5 * house_df['HalfBath']) + house_df['BsmtFullBath'] + (0.5 * house_df['BsmtHalfBath'])\n",
        "house_df['YearBlRm'] = house_df['YearBuilt'] + house_df['YearRemodAdd']\n",
        "house_df['TotalPorchSF'] = house_df['OpenPorchSF'] + house_df['3SsnPorch'] + house_df['EnclosedPorch'] + house_df['ScreenPorch'] + house_df['WoodDeckSF']\n",
        "house_df['TotalBsmQual'] = house_df['BsmtQual_num'] + house_df['BsmtCond_num'] + house_df['BsmtFinType1_num'] + house_df['BsmtFinType2_num']\n",
        "house_df['TotalGrgQual'] = house_df['GarageQual_num'] + house_df['GarageCond_num']\n",
        "\n",
        "# QualPorch 열 생성\n",
        "house_df['QualPorch'] = house_df['TotalExtQual'] * house_df['TotalPorchSF']"
      ],
      "metadata": {
        "id": "fB6C6vldCram"
      },
      "execution_count": 367,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "house_df['YrBltAndRemod']=house_df['YearBuilt']+house_df['YearRemodAdd']\n",
        "\n",
        "house_df['Total_sqr_footage'] = (house_df['BsmtFinSF1'] + house_df['BsmtFinSF2'] +\n",
        "                                 house_df['1stFlrSF'] + house_df['2ndFlrSF'])"
      ],
      "metadata": {
        "id": "6mCQkLeVCtyZ"
      },
      "execution_count": 368,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# simplified house_df\n",
        "house_df['haspool'] = house_df['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n",
        "house_df['has2ndfloor'] = house_df['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n",
        "house_df['hasgarage'] = house_df['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n",
        "house_df['hasbsmt'] = house_df['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n",
        "house_df['hasfireplace'] = house_df['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)"
      ],
      "metadata": {
        "id": "2nhqZDVWCwr_"
      },
      "execution_count": 369,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "house_df['HasWoodDeck'] = (house_df['WoodDeckSF'] == 0) * 1\n",
        "house_df['HasOpenPorch'] = (house_df['OpenPorchSF'] == 0) * 1\n",
        "house_df['HasEnclosedPorch'] = (house_df['EnclosedPorch'] == 0) * 1\n",
        "house_df['Has3SsnPorch'] = (house_df['3SsnPorch'] == 0) * 1\n",
        "house_df['HasScreenPorch'] = (house_df['ScreenPorch'] == 0) * 1\n",
        "house_df['YearsSinceRemodel'] = house_df['YrSold'].astype(int) - house_df['YearRemodAdd'].astype(int)\n",
        "house_df['Total_Home_Quality'] = house_df['OverallQual'] + house_df['OverallCond']\n",
        "house_df['Total_SF'] = house_df['TotalBsmtSF'] + house_df['1stFlrSF'] + house_df['2ndFlrSF']"
      ],
      "metadata": {
        "id": "1jZK1O5MCygL"
      },
      "execution_count": 370,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "house_df['has2ndfloor']"
      ],
      "metadata": {
        "id": "mmaaiHHNC1IA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f9dab2cc-597c-4464-85a9-c1712f46f07e"
      },
      "execution_count": 371,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       1\n",
              "1       0\n",
              "2       1\n",
              "3       1\n",
              "4       1\n",
              "       ..\n",
              "2914    0\n",
              "2915    0\n",
              "2916    0\n",
              "2917    0\n",
              "2918    1\n",
              "Name: has2ndfloor, Length: 2907, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 371
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_features2 = [feature for feature in house_df.columns if house_df[feature].dtypes != 'O']\n",
        "\n",
        "print('Number of numerical variables: ', len(numerical_features2))"
      ],
      "metadata": {
        "id": "OOLihPAHDKGo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0e06543f-12ee-43c6-b487-89b4c36d1dcb"
      },
      "execution_count": 372,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of numerical variables:  69\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EJ-AS09ue8-c"
      },
      "source": [
        "# < 인코딩 >"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 373,
      "metadata": {
        "id": "QY4RF-ZO-AUC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "039c338c-3919-418e-f2d2-189d242ef519"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "범주형 변수들의 리스트: ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition']\n"
          ]
        }
      ],
      "source": [
        "# 범주형 변수들의 리스트 반환\n",
        "categorical_features = house_df.select_dtypes(include=['object']).columns.tolist()\n",
        "print(\"범주형 변수들의 리스트:\", categorical_features)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 374,
      "metadata": {
        "id": "ONICl55B-B36"
      },
      "outputs": [],
      "source": [
        "# 범주형 변수들을 원-핫 인코딩하여 모델에 사용할 수 있도록 변환\n",
        "house_df_encoded = pd.get_dummies(house_df, columns=categorical_features)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lPRv1wdjhqOj"
      },
      "source": [
        "# < 모델링 >"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.experimental import enable_hist_gradient_boosting  # noqa\n",
        "from sklearn.ensemble import HistGradientBoostingRegressor\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# 분할\n",
        "y = house_df_encoded[tr_idx].pop('SalePrice')\n",
        "X = house_df_encoded[tr_idx].drop('SalePrice',axis=1,errors='ignore')\n",
        "X_sub = house_df_encoded[~tr_idx].drop('SalePrice',axis=1,errors='ignore')\n",
        "print('X', X.shape, 'y', y.shape, 'X_sub')\n",
        "\n",
        "# 그리드 서치를 통해 최적의 하이퍼파라미터 찾기\n",
        "param_grid = {\n",
        "    'max_iter': [100, 300, 500],\n",
        "    'learning_rate': [0.01, 0.05, 0.1],\n",
        "    'max_depth': [3, 5, 7]\n",
        "}\n",
        "grid_search = GridSearchCV(HistGradientBoostingRegressor(), param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1)\n",
        "grid_search.fit(X, y)\n",
        "\n",
        "# 최적의 하이퍼파라미터 출력\n",
        "print(\"Best parameters found: \", grid_search.best_params_)\n",
        "\n",
        "# 최적의 모델로 재학습\n",
        "best_gb_regressor = grid_search.best_estimator_\n",
        "best_gb_regressor.fit(X, y)\n",
        "\n",
        "# 학습 데이터에 대한 예측값 생성\n",
        "train_predictions = best_gb_regressor.predict(X)\n",
        "\n",
        "# RMSE 계산\n",
        "train_rmse = mean_squared_error(y, train_predictions, squared=False)\n",
        "print(\"Training RMSE: \", train_rmse)"
      ],
      "metadata": {
        "id": "zivsnmVwDSs5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "49929e97-53b7-4b2d-b5eb-33a41192f7ca"
      },
      "execution_count": 375,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X (1448, 318) y (1448,) X_sub\n",
            "Fitting 5 folds for each of 27 candidates, totalling 135 fits\n",
            "Best parameters found:  {'learning_rate': 0.05, 'max_depth': 3, 'max_iter': 500}\n",
            "Training RMSE:  0.07009023906822047\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 테스트 데이터에 대한 예측값 생성\n",
        "test_predictions = best_ensemble_regressor.predict(X_sub)\n",
        "\n",
        "# submission 데이터프레임에 예측값 삽입\n",
        "submission['SalePrice'] = np.expm1(test_predictions)  # 로그 스케일로 변환된 SalePrice를 다시 원래 스케일로 변환\n",
        "\n",
        "# CSV 파일로 저장\n",
        "submission.to_csv('histGB.csv', index=False)"
      ],
      "metadata": {
        "id": "1bvVAp0CdsRo"
      },
      "execution_count": 376,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1UE3EamoaZZ-_y_wWmxGHvOJSnrQ9qZ1_",
      "authorship_tag": "ABX9TyNt7cciNi4ZGH0Jq0gtWWna",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}